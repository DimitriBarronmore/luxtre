#!/usr/bin/env luajit
local curr_location = arg[0]:gsub("luxtre/bin/lux$", "")

package.path = package.path .. ";" .. arg[0]:gsub("luxtre/bin/lux$", "") .. "?.lua"
-- local loader = require(arg[0] .. "/loader")

local data = require("luxtre.utils.data")
data.__binary_prefix = curr_location
local loader = require("luxtre.init")
loader.register()

local realargs = {}
local capturemore = {
    -- ["--cap"] = true,
    -- ["-c"] = true,
}

local capd = {}
for k,v in ipairs(arg) do
    -- print(k, v)
    if v:match("^%-") and not capd[v] then
        if capturemore[v] then
            local capture = arg[k + 1]
            if capture == nil then
                error("argument " .. v .. " requires a value", 0)
            end
            capd[arg[k + 1]] = true
            realargs[v] = capture
        else
            realargs[v] = true
        end
        -- realargs[v] = true
    elseif not capd[v] then
        table.insert(realargs, v)
    end
end

-- for k,v in pairs(realargs) do
--     print(k,v)
-- end


local file = realargs[1]

if type(file) == "string" then
    file = file:gsub("%.lux$", "")
    if realargs["-c"] or realargs["--compile"] == true then
        local res, err = pcall(loader.compile_file, file)
        if err then
            error("lux: " .. err, 0)
        end
    end
    if realargs["-c"] or realargs["--compile"] == true then
        loader.auto_compile(true)
    end
    local res, err = pcall(loader.dofile, file)
    if err then
        error("lux: " .. err, 0)
    end
elseif type(file == "nil") then

    -- steal some stuff from the preprocessor
    local function multiline_status(line, in_string, eqs)
        local s, e = 1, nil
        repeat
            if not in_string then
                s, e, eqs = line:find("%[(=*)%[", s)
                if s then
                    in_string = true
                end
            else
                s, e = line:find(("]%s]"):format(eqs), s, true)
                if s then
                    in_string = false
                    eqs = ""
                end
            end
        until s == nil
        return in_string, eqs
    end
    
    local function check_conditional(line, hanging_conditional)
        local s = 1
        repeat
            local had_result = false
            local r1 = {line:find("then", s)}
            local r2 = {line:find("else", s)}
            local r3 = {line:find("do", s)}
            local r4 = {line:find("repeat", s)}
            local r5 = {line:find("function%s+[%d%a_%.:]-%s-%b()", s)}
            local result = (r1[1] and r1)
                        or (r2[1] and r2)
                        or (r3[1] and r3)
                        or (r4[1] and r4)
                        or (r5[1] and r5)
                        or nil
            if result then
                hanging_conditional = hanging_conditional + 1
                s = result[2]
                had_result = true
            end
    
            local r1 = {line:find("end", s)}
            local r2 = {line:find("until", s)}
            local result = (r1[1] and r1)
                        or (r2[1] and r2)
                        or nil
            if result then
                hanging_conditional = hanging_conditional - 1
                s = result[2]
                had_result = true
            end
    
        until had_result == false
        return hanging_conditional
    end

    local exit = false
    local env = setmetatable({exit = function() exit = true end }, {__index = _G})

    -- repl
    local in_string, hanging_conditional = false, 0
    local eqs
    local concat = {}
    local continue
    print("Luxtre indev.0.5.0 -- repl 0.2")
    while exit ~= true do
        io.stdout:write("> ")
        local input = io.stdin:read()
        if not input then print() break end
        local input, hanging = input:gsub("\\$", "")
        if hanging > 0 then
            continue = true
        else
            continue = false
        end
        table.insert(concat, input)
        in_string, eqs = multiline_status(input, in_string, eqs)
        hanging_conditional = check_conditional(input, hanging_conditional)
        if (not in_string) and (hanging_conditional <= 0) and not continue then
            local compiled = table.concat(concat, "\n")
            concat = {}
            -- print(compiled)
            local status, res = pcall(loader.dostring, compiled, env)
            if status == false then
                print(res:gsub("^.-:%d+: ", "error: "))
            end
        end
    end
end
--]==]